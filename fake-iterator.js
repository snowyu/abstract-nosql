// Generated by CoffeeScript 1.12.7
(function() {
  var AbstractIterator, FakeIterator, inherits, sinon;

  sinon = require('sinon');

  AbstractIterator = require('abstract-iterator');

  inherits = require('inherits-ex/lib/inherits');

  module.exports = FakeIterator = (function() {
    var getIndexGreaterThan, getIndexLessThan;

    inherits(FakeIterator, AbstractIterator);

    getIndexGreaterThan = function(arr, name) {
      var i;
      i = -1;
      while (++i < arr.length) {
        if (name <= arr[i]) {
          return i;
        }
      }
      return -1;
    };

    getIndexLessThan = function(arr, name) {
      var i;
      i = arr.length;
      while (--i >= 0) {
        if (name >= arr[i]) {
          return i;
        }
      }
      return -1;
    };

    function FakeIterator() {
      var index;
      FakeIterator.__super__.constructor.apply(this, arguments);
      this.keys = Object.keys(this.db.data);
      this.keys.sort();
      this.start = 0;
      this.notReverse = this.options.reverse !== true;
      this.end = this.keys.length;
      if (!isNaN(this.options.limit)) {
        this.limit = this.options.limit;
      }
      if (this.limit > 0 && this.limit < this.end) {
        this.end = this.limit;
      }
      if (this.options.lt) {
        index = getIndexLessThan(this.keys, this.options.lt);
        if (index < 0) {
          index = this.keys.length;
        }
        if (this.notReverse) {
          this.end = index;
        } else {
          this.start = index;
        }
      } else if (this.options.lte) {
        index = getIndexLessThan(this.keys, this.options.lte);
        if (index < 0) {
          index = this.keys.length;
        } else {
          index++;
        }
        if (this.notReverse) {
          this.end = index;
        } else {
          this.start = index;
        }
      }
      if (this.options.gt) {
        index = getIndexGreaterThan(this.keys, this.options.gt) + 1;
        if (this.notReverse) {
          this.start = index;
        } else {
          this.end = index;
        }
      } else if (this.options.gte) {
        index = getIndexGreaterThan(this.keys, this.options.gte);
        if (this.notReverse) {
          this.start = index;
        } else {
          this.end = index;
        }
      }
    }

    FakeIterator.prototype._nextSync = sinon.spy(function() {
      var key, result;
      result = this.start < this.end;
      if (result) {
        key = this.keys[this.start];
        result = [key, this.db.data[key]];
        ++this.start;
      }
      return result;
    });

    return FakeIterator;

  })();

}).call(this);
